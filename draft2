
//Michael Nester, Luca Nero
//CSC 106
//Final Project




//background and global variables
background(240, 240, 240);
var started = false;
var NUM_COLS = 5;
var NUM_ROWS = 5;
var move = 54;
var numMoves = 0;
var livesLeft = 3;
var rightAns = 0;
var wrongAns = 0;
var gameWin = false;
var gameLoss = false;
var h = 50;



//Object for Mike's bitmoji
var BitMike = function(x, y) {
    this.x = x;
    this.y = y;    
};
BitMike.prototype.draw = function() {
    this.y = constrain(this.y, 0, height - 50);
    fill(255, 224, 189);
ellipse(this.x, this.y, h/100*80, h/100*100);
fill(54, 36, 14);
quad(this.x-(h/100*50), this.y, this.x-(h/100*37), this.y-(h/100*32), this.x-(h/100*10), this.y-(h/100*50), this.x-(h/100*30), this.y-(h/100*1));
quad(this.x+(h/100*50), this.y, this.x+(h/100*35), this.y-(h/100*32), this.x+(h/100*15), this.y-(h/100*47), this.x+(h/100*30), this.y-(h/100*1));
rect(this.x-9, this.y - 25, (h/100*35), (h/100*20), (h/100*10));
fill(69, 62, 29);
ellipse(this.x-(h/100*15), this.y-5, (h/100*10), (h/100*10));
ellipse(this.x+(h/100*20), this.y-5, (h/100*10), (h/100*10));
stroke(0, 0, 0);
fill(255, 224, 189);
bezier(this.x, this.y, this.x+(h/100*25), this.y+(h/100*22), this.x+(h/100*2), this.y+(h/100*10), this.x, this.y+(h/100*19));
fill(245, 191, 209);
arc(this.x+(h/100*3), this.y+(h/100*29), (h/100*20), (h/100*10), (h/100*1), (h/100*360));
arc(this.x+(h/100*3), this.y+(h/100*25), (h/100*20), (h/100*13), (h/100*1), (h/100*180));
fill(255, 255, 255);

stroke(5, 1, 1);
quad(this.x-(h/100*10), this.y+(h/100*100), this.x-(h/100*5), this.y+(h/100*50), this.x-(h/100*50), this.y+(h/100*50), this.x-(h/100*60), this.y+(h/100*100));
quad(this.x+(h/100*60), this.y+(h/100*100), this.x+(h/100*45), this.y+(h/100*50), this.x-(h/100*50), this.y+(h/100*50), this.x-(h/100*60), this.y+(h/100*100));
fill(0, 0, 0);
line(this.x-(h/100*20), this.y+(h/100*60), this.x-(h/100*30), this.y+(h/100*90));
line(this.x-(h/100*20), this.y+(h/100*60), this.x-(h/100*15), this.y+(h/100*90));
line(this.x-(h/100*5), this.y+(h/100*60), this.x-(h/100*15), this.y+(h/100*90));
line(this.x-(h/100*5), this.y+(h/100*60), this.x, this.y+(h/100*90));
line(this.x+(h/100*10), this.y+(h/100*60), this.x+(h/100*10), this.y+(h/100*90));
line(this.x+(h/100*10), this.y+(h/100*60), this.x+(h/100*25), this.y+(h/100*90));
line(this.x+(h/100*25), this.y+(h/100*60), this.x+(h/100*25), this.y+(h/100*90));
};
var bitMike = new BitMike(100, 300);

//object for Luca's bitmoji
var drawBitmoji = function(x, y, h){
//FACE SHAPE//
    noStroke();
    fill(255, 223, 163);
    ellipse(x+(h/150*100), y+(h/150*100), (h/150*81), (h/150*100)); //my head shape

    fill(240, 240, 240);
    arc(x+(h/150*172), y+(h/150*155), (h/150*100), (h/150*100), 130, 250); //right         cheek chisel

    fill(240, 240, 240);
    arc(x+(h/150*32), y+(h/150*160), (h/150*100), (h/150*100), -70, 50); //left cheek      chisel
//HAIR//
    fill(135, 84, 8);
    quad(x+(h/150*59.4), y+(h/150*101), x+(h/150*66), y+(h/150*70), x+(h/150*88), y+(h     /150*52), x+(h/150*61), y+(h/150*99)); //Left hair
    quad(x+(h/150*142), y+(h/150*101), x+(h/150*134), y+(h/150*59), x+(h/150*120), y+(h     /150*53), x+(h/150*126), y+(h/150*72)); //Right hair

    ellipse(x+(h/150*100), y+(h/150*61), (h/150*70), (h/150*22)); //top hair
//EYES//
    fill(255, 255, 255);
    ellipse(x+(h/150*84), y+(h/150*95), (h/150*18), (h/150*8)); //left eye whites

    fill(255, 255, 255);
    ellipse(x+(h/150*116), y+(h/150*95), (h/150*18), (h/150*8)); //right eye whites


    fill(82, 45, 0);//fill brown eyes
    ellipse(x+(h/150*84), y+(h/150*95), (h/150*10), (h/150*8)); //left eye pupil
    ellipse(x+(h/150*116), y+(h/150*95), (h/150*10), (h/150*8)); //right eye pupil


//HAT//
    fill(158, 158, 158);
    arc(x+(h/150*101), y+(h/150*68), (h/150*74), (h/150*60), -180, 0);//top of hat
    fill(138, 138, 138);
    ellipse(x+(h/150*101), y+(h/150*67), (h/150*86), (h/150*5));//hat brim
    fill(0, 0, 0);
//NOSE//
    stroke(194, 163, 116);
    fill(255, 223, 163);
    bezier(x+(h/150*100), y+(h/150*100), x+(h/150*121), y+(h/150*122), x+(h/150*92), y     +(h/150*120), x+(h/150*96), y+(h/150*115));
//MOUTH//
    fill(255, 255, 255);
    arc(x+(h/150*101), y+(h/150*128), (h/150*31), (h/150*8), 1, 180); //arc and teeth
    line(x+(h/150*86), y+(h/150*128), x+(h/150*114), y+(h/150*128));//top
//EYEBROWS//
    fill(255, 223, 163);
    arc(x+(h/150*83), y+(h/150*90), (h/150*31), (h/150*8), -121, -52); //left//
    arc(x+(h/150*115), y+(h/150*90), (h/150*31), (h/150*8), -121, -52); //right//
//NECK//
    noStroke();
    quad(x+(h/150*128), y+(h/150*164), x+(h/150*110), y+(h/150*143), x+(h/150*91), y+(h     /150*145), x+(h/150*76), y+(h/150*164));//neck quad
//SHIRT//
    fill(255, 223, 163);
    rect(x+(h/150*44), y+(h/150*191), (h/150*29), (h/150*41));//left arm

    fill(255, 223, 163);
    rect(x+(h/150*133), y+(h/150*191), (h/150*29), (h/150*41));//right arm

    fill(4, 15, 115);
    arc(x+(h/150*102), y+(h/150*162), (h/150*51), (h/150*10), -25, 200);//collar
    quad(x+(h/150*142), y+(h/150*232), x+(h/150*137), y+(h/150*162), x+(h/150*67), y+(h     /150*164), x+(h/150*65), y+(h/150*232)); //shirt body
    ellipse(x+(h/150*141), y+(h/150*174), (h/150*48), (h/150*26)); //right shirt           shoulder
    ellipse(x+(h/150*64), y+(h/150*174), (h/150*48), (h/150*26)); //left shirt shoulder
    rect(x+(h/150*135), y+(h/150*175), (h/150*29), (h/150*41));//right sleeve
    rect(x+(h/150*41), y+(h/150*175), (h/150*29), (h/150*41));//left sleeve
//SHIRT TEXT//

    textSize(h/150*39);
    fill(255, 255, 255);
    text("LN", x+(h/150*72), y+(h/150*177), (h/150*100), (h/150*100));

};

drawBitmoji(257, 254, 65);


//declare player object
var player = function(playerX, playerY) {
  this.x = playerX;
  this.y = playerY;
  this.size = 50;
};


//drawing the player character
player.prototype.draw = function() {
    fill(random(0, 255), random(0, 255), random(0, 255));
    textSize(35);
      image(getImage("avatars/starky-seed"), this.x, this.y, this.size, this.size);
      textSize(19);
      text("**", this.x + 15, this.y + 30, this.size, this.size);
};



//trying to get the moves to stay on the board

var drawPlayer = new player(170, 170);


//declare tile object
var Tile = function(x, y, face) {
    this.posX = 2;
    this.posY = 2;
    this.x = x;
    this.y = y;
    this.size = 50;
    //not relevant
    this.face = face;
    this.isFaceUp = true;
    this.isMatch = false;
};

//scene object declaration for obstacles and other scenes
var scene = function(statement, choice1, choice2, choice3, choice4, answer){
    this.title = statement;
    this.answer = answer;
    this.one = choice1;
    this.two = choice2;
    this.three = choice3;
    this.four = choice4;
};


//config 
scene.prototype.draw = function() {
    background(203, 250, 197);
    fill(0, 0, 0);
    text(this.title, 20, 20, 1000, 100);
    text("1.) " + this.one, 20, 100, 150, 100);
    text("2.) " + this.two, 20, 130, 150, 100);
    text("3.) " + this.three, 20, 160, 170, 100);
    text("4.) " + this.four, 20, 190, 190, 100);
};


// new scene for question 1
var question1 = new scene("Question: What character ends every\n statement in java?", ".", ";", "/*", "|", 2);
//control function for question 1 answers
var q1Control = function(ans) {
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 115 && mouseY >= 90)         {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 4;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 145 && mouseY >= 120         ) {
        rightAns = 1;
        numMoves = 4;

        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 175 && mouseY >= 150         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 4;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 205 && mouseY >= 180         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 4;
        }
        return wrongAns;
};
//question 2 object
var question2 = new scene("Question: What FPS is the draw function\n default set to?", "60", "100", "45", "1", 1);
//control function for question 2
var q2Control = function(ans) {
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 115 && mouseY >= 90)         {
        rightAns += 1;
        numMoves = 9;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 145 && mouseY >= 120         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 9;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 175 && mouseY >= 150         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 9;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 205 && mouseY >= 180         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 9;
        }
        return wrongAns;
};
//question 3 scene
var question3 = new scene("Which of the following function of\n array object reverses the order\n of the elements of an array? ", "push()", "reduce()", "reverse()", "pop()", 3);
//question 3 controller
var q3Control = function(ans) {
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 115 && mouseY >= 90)         {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 16;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 145 && mouseY >= 120         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 16;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 175 && mouseY >= 150         ) {
        rightAns += 1;
        numMoves = 16;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 205 && mouseY >= 180         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 16;
        }
        return wrongAns;
};

//question 4 scene
var question4 = new scene("Javascript is a(n)\n ___ language?", "Object-Based", "Low level", "Object-oriented", "none of the above", 3);
//control function for question 4
var q4Control = function(ans) {
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 115 && mouseY >= 90)         {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 21;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 145 && mouseY >= 120         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 21;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 175 && mouseY >= 150         ) {
        rightAns += 1;
        numMoves = 21;
        }
        if (mouseIsPressed && mouseX <= 70 && mouseX >= 15 && mouseY <= 205 && mouseY >= 180         ) {
        livesLeft -= 1;
        wrongAns += 1;
        numMoves = 21;
        }
        return wrongAns;
};

//splash screen for winning the game
var winGame = function() {
    background(116, 166, 132);
    fill(255, 255, 255);
    text("YOU WIN!\n Here is your prize!\n", 130, 30, 200, 100);
    text("Click the lock to open", 100, 250, 200, 100);
    image(getImage("cute/ChestClosed"), 150, 60, 0, 0);
    if (mouseIsPressed && mouseX >= 190 && mouseX <= 210 && mouseY >= 190 && mouseY <= 220){
    image(getImage("cute/ChestOpen"), 150, 68, 0, 0);
    image(getImage("avatars/starky-tree"), 150, 60, 0, 0);
    fill(random(0, 255), random(0, 255), random(0, 255));
    text("CHARACTER UPGRADE", 20, 160, 200, 100);
    text("click RESTART to play again!", 130, 300, 200, 100);
    }
};
//splash screen for losing game
var loseGame = function() {
    background(116, 166, 132);
    fill(255, 255, 255);
    text("YOU LOSE", 130, 30, 200, 100);
    text("you have been reduced to dirt", 120, 50, 200, 100);
    image(getImage("cute/DirtBlock"), 150, 60, 0, 0);
    fill(random(0, 255), random(0, 255), random(0, 255));
    text("click RESTART to play again!", 130, 230, 200, 100);
};
//draw tiles
Tile.prototype.draw = function() {
    fill(166, 103, 40);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 10);
};

//draw tiles
Tile.prototype.drawStart = function() {
    fill(181, 148, 105);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 0);
};

//declare tiles array
var tiles = [];

//create tile grid
for (var i = 0; i < NUM_COLS; i++) {
    for (var j = 0; j < NUM_ROWS; j++) {
        var tileX = i * 54 + 60;
        var tileY = j * 54 + 60;
        tiles.push(new Tile(tileX, tileY));
    }
}


//small array for center coords for x and y centers of each tile
var tileCenterX = [80, 135, 243, 298];
var tileCenterY = [80, 135, 240, 290];

var tileIndexX = [0, 1, 2, 3, 4];
var tileIndexY = [0, 1, 2, 3, 4];

//move functions for the player \/
player.prototype.moveUp = function() {
    if (this.y > 105) {
        this.y -= move;
//store each move
        numMoves += 1;
    }
    else {
        this.y = 165;
        this.x = 170;
//lose a life if you move off the grid, restart in the center
        livesLeft -= 1;
    }
};
//move down function
player.prototype.moveDown = function() {
    if (this.y < 250) {
        this.y += move;
        numMoves += 1;
    }
    else {
        this.y = 165;
        this.x = 170;
        livesLeft -= 1;
    }

};
//move left function
player.prototype.moveLeft = function() {
    if (this.x > 90) {
        this.x -= move;
        numMoves += 1;
    } else {
        this.y = 165;
        this.x = 170;
        livesLeft -= 1;
    }


};

//move right function
player.prototype.moveRight = function() {
    if (this.x < 250) {
        this.x += move;
        numMoves += 1;
    } else {
        this.y = 165;
        this.x =170;
        livesLeft -= 1;
    }

};

//debug boolean
var itWorks = false;

//case for the first obstacle
if (numMoves === 2) {
    itWorks = true;
//fill(0, 0, 0);
//text("question 1: what character do you end most coding lines with?", 200, 300, 100, 100);
}

//start button testing
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};
Button.prototype.draw = function() {
    fill(255, 255, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(255, 255, 255);
    textSize(30);
    textAlign(LEFT, TOP);
    text(this.label, this.x+25, this.y+this.height/4);
};
Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};
var startBtn = new Button({
    x: 124,
    y: 210,
    label: "START",
    onClick: function() {
        started = true;
    }
});
startBtn.draw();
mouseClicked = function() {
    startBtn.handleMouseClick();
};

//draw function
draw = function() {
//draw splash screen
    if (started === false) {
    fill (0, 0, 0);
    textSize(50);
    text("TREASURE\n    GAME!",64, 20); 
    fill(214, 247, 202);
    rect(0, 0, 50, 443, 0);
    rect(349, 0, 50, 458, 0);
    fill(255, 255, 255);
    fill(125, 95, 12);
    rect(24, 0, 5, 467, 0);
    rect(373, 0, 5, 467, 0);
//treasure image
    var titleI = getImage("cute/ChestClosed");
    image(titleI, 124, 99, 151, 169);
    textSize(36);
    fill(255, 255, 255);
    text("START",143,210);
    }
    bitMike.draw();
// ... start game
    if (started === true) {
    background(255, 255, 255);
    for (var i = 0; i < tiles.length; i++) {
    tiles[i].drawStart();
    }
    fill(0, 0, 0);
//show how many lives left you have
    text("Lives Left: " + livesLeft, 200, 350, 100, 100);
    drawPlayer.draw();
    drawPlayer.draw();
    }
    if (numMoves === 3) {
        question1.draw();
        q1Control(2);
    }
    if (wrongAns === 1) {
        fill(247, 247, 247);
        rect(90, 10, 50, 0);
        fill(0, 0, 0);
        text("OH NOES! - 1 life", 100, 20, 1000, 100);    
        }
    if (rightAns === 1) {
        fill(247, 247, 247);
        rect(90, 10, 50, 0);
        fill(0, 0, 0);
        text("Nice! Continue the game", 100, 20, 1000, 100);
    }
    if (numMoves === 8) {
        question2.draw();
        q2Control(1);
    }
    if (wrongAns === 2) {
        fill(247, 247, 247);
        rect(90, 10, 50, 0);
        fill(0, 0, 0);
        text("OH NOES! - 1 life", 100, 20, 1000, 100);    
    }
    if (rightAns === 2) {
        fill(247, 247, 247);
        rect(90, 10, 50, 0);
        fill(0, 0, 0);
        text("Nice! Continue the game", 100, 20, 1000, 100);
    }
    if (numMoves === 15) {
        question3.draw();
        q3Control(3);
    }
    
    
    if (numMoves === 20) {
        question4.draw();
        q4Control(3);
    }
    if (rightAns === 3) {
        winGame();
    }
    if (livesLeft <= 0 || wrongAns >= 3) {
        loseGame();   
    }
};

//function for moving the player
keyPressed = function() {
//calling each move function when up down left or right arrow key is pressed, respectfully
    if (keyCode === UP) {
        drawPlayer.moveUp();
        drawPlayer.draw();
    }
    if (keyCode === DOWN) {
        drawPlayer.moveDown();
        drawPlayer.draw();
    }
    if (keyCode === LEFT) {
        drawPlayer.moveLeft();
        drawPlayer.draw();
    }
    if (keyCode === RIGHT) {
        drawPlayer.moveRight();
        drawPlayer.draw();
    }
    
};

//Recycle bin


//  \*******/
//   \*****/
//    \***/
  
  
  //SHIT TO DO
//change the "map" to either actually work with the current design, or make it more khan stuff
//(I dont think this map will work because not all of the characters are the same size, like they were in the other terminal i used)
//maybe use tiles, like from the matching game, with an image representing the player on one tile
//the player starts in the middle of a 5 by 5 grid
//maybe hitting an obstacle is like flipping a tile
// then make a new scene to ask a question
//Note; i think a lot of the code to write the map (drawMap();) can be slightly changed but if not we should just steal the tile shit from the memory game
//I am going to make a spin-off of this and use the tiles to see how it works
//the original code is set to take inputs from a regular terminal, like typing*
//*change this to use buttons with choices (up, down, left, right)


/*Tile.prototype.moveUp = function() {
    fill(214, 247, 202);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 10);
    image(getImage("avatars/starky-seed"), ogX, ogY - up, this.size, this.size);
    
};

Tile.prototype.moveDown = function() {
    fill(214, 247, 202);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 10);
    image(getImage("avatars/starky-seed"), ogX, ogY + down, this.size, this.size);
    //ogY = ogY + down;
};

Tile.prototype.moveLeft = function() {
    fill(214, 247, 202);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 10);
    image(getImage("avatars/starky-seed"), 120 - left, 150, this.size, this.size);
    //ogX = ogX - left;
};

Tile.prototype.moveRight = function() {
    fill(214, 247, 202);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 10);
    image(getImage("avatars/starky-seed"), 120 + right, 150, this.size, this.size);
    //ogX = ogX + right;
};*/



/*fill(0, 184, 37);
    for (var i = 0; i < tiles.length; i++) {
        tiles[i].drawStart();
    }
    
    upBtn.draw();
    downBtn.draw();
    leftBtn.draw();
    rightBtn.draw();*/



//buttons

/*var button = function(x, y, direction) {
    this.x = x;
    this.y = y;
    this.size = 25;
    this.btn = direction;
};*/

/*button.prototype.draw = function() {
     fill(255, 0, 0);
     rect(this.x, this.y, this.size, this.size, 10);
     fill(0, 0, 0);
     text(this.btn, this.x + 10, this.y + 10, 25, 25);
};*/





/*var drawObs = function(x, y) {
    noStroke();
    fill(0, 0, 0);
    rect(x, y, 10, 10, 0);  
};*/



//var obs = [];
//var itWorks = false;

//var indexX = floor(random(tileCenterX.length));
//var indexY = floor(random(tileCenterY.length));
//var indexX2 = floor(random(tileCenterX.length));
//var indexY2 = floor(random(tileCenterY.length));
//var indexX3 = floor(random(tileCenterX.length));
//var indexY3 = floor(random(tileCenterY.length));

/*player.prototype.isOnObs = function() {
    if (indexX <= this.x + 20 && indexX >= this.x - 20 && indexY <= this.y + 20 && indexY <= this.y - 20) {
        question1.draw();
    }
};*/

/*drawObs(tileCenterX[indexX], tileCenterY[indexY]);
    drawObs(tileCenterX[indexX2], tileCenterY[indexY2]);
    drawObs(tileCenterX[indexX3], tileCenterY[indexY3]);
    drawPlayer.isOnObs();*/


//if start button is clicked...
    /*if (mouseX>100&&mouseX<300&&mouseY>150&&mouseY<250&&mouseIsPressed) {
        started = true;
    }*/
